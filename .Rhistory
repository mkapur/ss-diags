p1 <-  ggplot(jit, aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
p1
runs.sig3 <- function(x,type="resid") {
if(type=="resid"){mu = 0}else{mu = mean(x, na.rm = TRUE)}
# Average moving range
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 3 * stdev
ucl <- mu + 3 * stdev
if(nlevels(factor(sign(x)))>1){ pvalue = round(tseries::runs.test(factor(sign(x)))$p.value,3)} else {
pvalue = 0.001
}
return(list(sig3lim=c(lcl,ucl),p.runs= pvalue))
}
get_ss3compsTA1.8 <- function(ss3rep,type=c('len','age','size','con'),fleet=NULL,
part = 0:2,pick.gender = 0:3,seas = NULL,method = NULL,
plotit = TRUE,maxpanel = 1000){
# Check the type is correct and the pick.gender is correct
is.in <- function (x, y)!is.na(match(x, y))
if(!is.in(type[1],c('age','len','size','con'))){
stop('Composition type incorrectly speficied')
}else{
if(sum(!is.in(pick.gender,c(0:3)))>0){
stop('Unrecognised value for pick.gender')
}
}
# Select the type of datbase
dbase <- ss3rep[[paste0(type[1],'dbase')]]
if(is.null(fleet)) fleet = unique(dbase$Fleet)
sel <-  is.in(dbase$Fleet,fleet) & is.in(dbase$Part,part)
if(type[1]!='con')sel <- sel & is.in(dbase$Sexes,pick.gender)
if(type[1]=='size' & !is.null(method)) sel <- sel & is.in(dbase$method,method)
if(sum(sel)==0) return()
dbase <- dbase[sel,]
if(is.null(seas)){
seas <- 'comb'
if(length(unique(dbase$Seas))>1)
cat('Warning: combining data from multiple seasons\n')
}
# create label for partitions
partitions <- sort(unique(dbase$Part)) # values are 0, 1, or 2
partition.labels <- c("whole","discarded","retained")[partitions+1]
partition.labels <- paste("(",paste(partition.labels,collapse="&")," catch)",sep="")
gender.flag <- type[1]!='con' & max(tapply(dbase$Sexes,
dbase$Fleet,function(x)length(unique(x))))>1
indx <- paste(dbase$Fleet,dbase$Yr,if(type[1]=='con')dbase$'Lbin_lo' else
'',if(seas=='sep')dbase$Seas else '')
if(gender.flag)indx <- paste(indx,dbase$Sexes)
method.flag <- if(type[1]=='size') length(unique(dbase$method))>1 else FALSE
if(method.flag)
indx <- paste(indx,dbase$method)
uindx <- unique(indx)
if(length(uindx)==1){
# presumably the method is meaningless of there's only 1 point,
# but it's good to be able to have the function play through
cat('Warning: only one point to plot\n')
return()
}
pldat <- matrix(0,length(uindx),10,
dimnames=list(uindx,
c('Obsmn','Obslo','Obshi','semn','Expmn','Std.res',
'ObsloAdj','ObshiAdj','Fleet','Yr')))
if(type[1]=='con')pldat <- cbind(pldat,Lbin=0)
if(gender.flag)pldat <- cbind(pldat,pick.gender=0)
if(method.flag)pldat <- cbind(pldat,method=0)
# Find the weighting factor for this combination of factors
for(i in 1:length(uindx)){  # each row of pldat is an individual comp
subdbase <- dbase[indx==uindx[i],]
xvar <- subdbase$Bin
pldat[i,'Obsmn'] <- sum(subdbase$Obs*xvar)/sum(subdbase$Obs)
pldat[i,'Expmn'] <- sum(subdbase$Exp*xvar)/sum(subdbase$Exp)
pldat[i,'semn'] <- sqrt((sum(subdbase$Exp*xvar^2)/sum(subdbase$Exp)-
pldat[i,'Expmn']^2)/mean(subdbase$N))
pldat[i,'Obslo'] <- pldat[i,'Obsmn']-2*pldat[i,'semn']
pldat[i,'Obshi'] <- pldat[i,'Obsmn']+2*pldat[i,'semn']
pldat[i,'Std.res'] <- (pldat[i,'Obsmn']-pldat[i,'Expmn'])/pldat[i,'semn']
pldat[i,'Fleet'] <- mean(subdbase$Fleet)
pldat[i,'Yr'] <- mean(if(seas=='comb')subdbase$Yr else subdbase$Yr.S)
if(type[1]=='con')pldat[i,'Lbin'] <- mean(subdbase$'Lbin_lo')
if(gender.flag)
pldat[i,'pick.gender'] <- mean(subdbase$'Pick_gender')
if(method.flag)
pldat[i,'method'] <- mean(subdbase$method)
}
Nmult <- 1/var(pldat[,'Std.res'],na.rm=TRUE)
# Find the adjusted confidence intervals
for(i in 1:length(uindx)){
pldat[i,'ObsloAdj'] <- pldat[i,'Obsmn']-2*pldat[i,'semn']/sqrt(Nmult)
pldat[i,'ObshiAdj'] <- pldat[i,'Obsmn']+2*pldat[i,'semn']/sqrt(Nmult)
}
Nfleet <- length(unique(pldat[,'Fleet']))
# make plot if requested
if(plotit){
plindx <- if(type[1]=='con'){
paste(pldat[,'Fleet'],pldat[,'Yr'])
}else{
pldat[,'Fleet']
}
if(gender.flag)plindx <- paste(plindx,pldat[,'pick.gender'])
if(method.flag)plindx <- paste(plindx,pldat[,'method'])
uplindx <- unique(plindx)
# Select number of panels
Npanel <- length(uplindx)
## Ian T. 9/25/14: changing from having at least 4 panels to no minimum
#NpanelSet <- max(4,min(length(uplindx),maxpanel))
NpanelSet <- min(length(uplindx),maxpanel)
Nr <- ceiling(sqrt(NpanelSet))
Nc <- ceiling(NpanelSet/Nr)
# save current graphical parameters
par_current <- par()
# set new parameters
par(mfrow=c(Nr,Nc),mar=c(2,2,1,1)+0.1,mgp=c(0,0.5,0),oma=c(1.2,1.2,0,0),
las=1)
par(cex=1)
for(i in 1:Npanel){
subpldat <- pldat[plindx==uplindx[i],,drop=FALSE]
x <- subpldat[,ifelse(type[1]=='con','Lbin','Yr')]
plot(x,subpldat[,'Obsmn'],pch='-',
xlim=if(length(x)>1)range(x) else c(x-0.5,x+0.5),
ylim=range(subpldat[,c('Obslo','Obshi','ObsloAdj','ObshiAdj','Expmn')],
na.rm=TRUE),
xlab='',ylab='')
segments(x,subpldat[,'Obslo'],x,subpldat[,'Obshi'],lwd=3)
arrows(x,subpldat[,'ObsloAdj'],x,subpldat[,'ObshiAdj'],lwd=1,
length=0.04, angle=90, code=3)
points(x,subpldat[,'Obsmn'],pch=21,bg='grey80')
ord <- order(x)
if(length(x)>1){
lines(x[ord],subpldat[ord,'Expmn'],col=4)
}else{
lines(c(x-0.5,x+0.5),rep(subpldat[,'Expmn'],2),col=4)
}
# Lines
fl <- ss3rep$FleetNames[subpldat[1,'Fleet']]
yr <- paste(subpldat[1,'Yr'])
lab <- if(type[1]=='con')ifelse(Nfleet>1,paste(yr,fl),yr) else fl
if(gender.flag)lab <-
paste(lab,ifelse(subpldat[1,'pick.gender']==0,'comb','sex'))
if(method.flag)lab <- paste(lab,'meth',subpldat[1,'method'])
lab <- paste(lab,partition.labels)
mtext(lab,side=3,at=mean(x))
}
mtext(paste('Mean',ifelse(is.in(type[1],c('len','size')),'length','age')),
side=2,las=0,outer=TRUE)
mtext(ifelse(type[1]=='con','Length','Year'),side=1,outer=TRUE)
# restore previous graphics parameters
par(mfrow=par_current$mfrow, mar=par_current$mar, mgp=par_current$mgp,
oma=par_current$oma, las=par_current$las)
}
tmp <- matrix(sample(pldat[,'Std.res'],1000*nrow(pldat),replace=TRUE),nrow(pldat))
confint <- as.vector(quantile(apply(tmp,2,function(x)1/var(x,na.rm=TRUE)),
c(0.025,0.975),na.rm=TRUE))
Output <- c(w=Nmult,lo=confint[1],hi=confint[2])
Outs <- paste("Francis Weights - ", type[1], ": ", ss3rep$FleetNames[fleet],": ",
round(Nmult,4), " (",round(confint[1],4),"-",round(confint[2],4),")",
sep="")
print(Outs)
pldat=data.frame(pldat)
yrs=pldat$Yr
comps_out  = list(ss_out = pldat ,runs_dat = data.frame(Fleet=pldat$Fleet,Fleet_name=ss3rep$FleetNames[pldat$Fleet],Yr=yrs,
Obs=pldat$Obsmn,Exp=pldat$Expmn))
# return(Output)
return(comps_out)
}
baseDir <- "./Max/NewRef/"
base_case <- SS_output(baseDir)
# baseDir <- "./Base_Case/"
baseDir <- "./Max/New_Ref/"
base_case <- SS_output(baseDir)
# baseDir <- "./Base_Case/"
baseDir <- "./Max/New_Ref"
base_case <- SS_output(baseDir)
# baseDir <- "./Base_Case/"
baseDir <- "./_mod/atl_tuna_max/New_Ref"
base_case <- SS_output(baseDir)
base_case$FleetNames
baseDir <- "./_mod/atl_tuna_max/Reference"
base_case <- SS_output(baseDir)
base_case$FleetNames
## for use with MAX
nm <- data.frame("Current.names" = base_case$FleetNames[1:4],
New.Names = c(paste0("Fishery",1:3),"Survey_1"))
## 6B JABBARESID max
CPUE_ResidRaw <- base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names") %>%
mutate(Fleet =  New.names) %>%
select(-Fleet_name, -New.names) %>%
mutate(logResidual = log(Obs) - log(Exp)) %>%
filter(abs(logResidual) < 3) %>%
select(Yr, Fleet, logResidual)
## for use with MAX
nm <- data.frame("Current.names" = base_case$FleetNames[1:4],
New.Names = c(paste0("Fishery",1:3),"Survey_1"))
nm
base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names")
## 6B JABBARESID max ----
CPUE_ResidRaw <- base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names") %>%
mutate(Fleet =  New.names) %>%
select(-Fleet_name, -New.names) %>%
mutate(logResidual = log(Obs) - log(Exp)) %>%
filter(abs(logResidual) < 3) %>%
select(Yr, Fleet, logResidual)
base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names") %>%
mutate(Fleet =  New.names) %>%
select(-Fleet_name, -New.names)
base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names") %>%
mutate(Fleet =  New.names)
base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names")
## for use with MAX
nm <- data.frame("Current.names" = base_case$FleetNames[1:4],
New.names = c(paste0("Fishery",1:3),"Survey_1"))
## Fig 6B JABBARESID max ----
CPUE_ResidRaw <- base_case$cpue %>%
select(-Fleet) %>%
merge(.,nm, by.x = "Fleet_name", by.y = "Current.names") %>%
mutate(Fleet =  New.names) %>%
select(-Fleet_name, -New.names) %>%
mutate(logResidual = log(Obs) - log(Exp)) %>%
filter(abs(logResidual) < 3) %>%
select(Yr, Fleet, logResidual)
smooth.res <- CPUE_ResidRaw %>%
mutate(smooth.res.all = predict(loess(logResidual~Yr))) %>%
group_by(Yr) %>%
dplyr::summarise(smoother = mean(smooth.res.all))
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
scale_color_manual(values = cbbPalette[c(2:7,1)],
guide = guide_legend(override.aes = list(
linetype = c(rep("blank", 6), "solid"),
shape = c(rep(19, 6), NA)))) +
geom_text(aes(x = 2013, y = 0.75, label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
p1
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
# scale_color_manual(values = cbbPalette[c(2:7,1)],
#                    guide = guide_legend(override.aes = list(
#                      linetype = c(rep("blank", 6), "solid"),
#                      shape = c(rep(19, 6), NA)))) +
geom_text(aes(x = 2013, y = 0.75, label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
p1
CPUE_ResidRaw
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
# scale_color_manual(values = cbbPalette[c(2:7,1)],
#                    guide = guide_legend(override.aes = list(
#                      linetype = c(rep("blank", 6), "solid"),
#                      shape = c(rep(19, 6), NA)))) +
geom_text(aes(x = 2013, y = 0.75, check_overlap = TRUE,
label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
# scale_color_manual(values = cbbPalette[c(2:7,1)],
#                    guide = guide_legend(override.aes = list(
#                      linetype = c(rep("blank", 6), "solid"),
#                      shape = c(rep(19, 6), NA)))) +
geom_text(aes(x = 2013, y = 0.75, checkoverlap = TRUE,
label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
?geom_text
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
# scale_color_manual(values = cbbPalette[c(2:7,1)],
#                    guide = guide_legend(override.aes = list(
#                      linetype = c(rep("blank", 6), "solid"),
#                      shape = c(rep(19, 6), NA)))) +
geom_text(check_overlap = TRUE,aes(x = 2013, y = 0.75,
label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
p1
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
scale_color_manual(values = cbbPalette[2])+
geom_text(check_overlap = TRUE,aes(x = 2013, y = 0.75,
label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
ggsave(p1, file = "./Fig6_JABBAResid_CPUE_Max.png",
width = 10, height = 8, dpi = 720, unit = 'in')
p1 <- ggplot(CPUE_ResidRaw, aes(x = Yr, y = logResidual)) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title =  element_text(size = 12)) +
geom_boxplot(aes(group = Yr)) +
geom_point(aes(colour = Fleet), size = 2, shape = 19) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_line(data = smooth.res, aes(x = Yr, y = smoother, color = 'loess'),
lwd = 0.8) +
scale_color_manual(values = cbbPalette[c(1,2)])+
geom_text(check_overlap = TRUE,aes(x = 2013, y = 0.75,
label = paste0('RMSE = ',with(CPUE_ResidRaw,
round(100*sqrt(sum(logResidual^2,na.rm =TRUE)/nrow(CPUE_ResidRaw)),1)),"%")), size = 5) +
labs(x = 'Year', y = 'log residual', col = "")
p1
ggsave(p1, file = "./Fig6_JABBAResid_CPUE_Max.png",
width = 10, height = 8, dpi = 720, unit = 'in')
jit <- read.csv("./_mod/atl_tuna_max/jit_like_Max.csv")
names(jit) <- c("idx", "value")
## METHOD for what is in plots/likelihoods
# jit <- read.csv("./_mod/atl_tuna_max/plots/Likelihoods.csv", sep = " ") %>%
# filter(Label == "TOTAL") %>%
# reshape2::melt() %>%
# filter(!is.na(value)) %>%
# dplyr::mutate(idx0 = as.numeric(as.character(sub('replist',"",variable))))
# jit %>%
# mutate(idx = 1:nrow(.)) %>%
p1 <-  ggplot(jit, aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
p1
jit <- read.csv("./_mod/atl_tuna_max/jit_like_Max.csv")
names(jit) <- c("idx", "value")
ggplot(jit, aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
# jit <- read.csv("./_mod/atl_tuna_max/jit_like_Max.csv")
# names(jit) <- c("idx", "value")
#
## METHOD for what is in plots/likelihoods
jit <- read.csv("./_mod/atl_tuna_max/plots/Likelihoods.csv", sep = " ") %>%
filter(Label == "TOTAL") %>%
reshape2::melt() %>%
filter(!is.na(value)) %>%
dplyr::mutate(idx0 = as.numeric(as.character(sub('replist',"",variable))))
p1 <-     jit %>%
mutate(idx = 1:nrow(.)) %>%ggplot(jit, aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
# jit <- read.csv("./_mod/atl_tuna_max/jit_like_Max.csv")
# names(jit) <- c("idx", "value")
#
## METHOD for what is in plots/likelihoods
jit <- read.csv("./_mod/atl_tuna_max/plots/Likelihoods.csv", sep = " ") %>%
filter(Label == "TOTAL") %>%
reshape2::melt() %>%
filter(!is.na(value)) %>%
dplyr::mutate(idx0 = as.numeric(as.character(sub('replist',"",variable))))
p1 <-
jit %>%
mutate(idx = 1:nrow(.)) %>%
ggplot(., aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
p1
p1
## Fig 7B side by side jitter ----
## mako and max, just likelihood
## MAX JITTER
maxDir <- "./_mod/atl_tuna_max/Reference/"
max_base <- SS_output(maxDir)
p1 <-
jit %>%
mutate(idx = 1:nrow(.)) %>%
ggplot(., aes(x = idx, y = value)) +
theme_bw() +
theme( panel.grid = element_blank(),
strip.text = element_text(size = 16),
axis.text = element_text(size = 10),
axis.title =  element_text(size = 12),
legend.position = 'none') +
geom_hline(yintercept = max_base$likelihoods_used[[1]][1],
col = 'red', linetype = 'dashed') +
geom_point() +
scale_y_continuous(limits = c(0,3000)) +
labs(x = "Jitter runs at a converged solution",
y = "Total Likelihood")
p1
p2 | p1
ggsave(p2 | p1,
file = "./Fig7B_jitter_max_mako.png",
width = 12, height = 10, dpi = 500, unit = 'in')
recProf <- read.table("./_mod/atl_tuna_max/Profile.csv", skip = 1, sep = ",", header =TRUE)[,1:5]
compProf <- read.table("./_mod/atl_tuna_max/Profile.csv", skip = 1, sep = ",", header =TRUE)[,7:11] %>% mutate(r0vec)
names(compProf) <- c(nm$New.names[nm$Current.names %in% names(compProf)], 'LNR0') ## swap names
idxProf <- read.table("./_mod/atl_tuna_max/Profile.csv", skip = 1, sep = ",", header =TRUE)[,13:17] %>% mutate(r0vec)
names(idxProf) <- c(nm$New.names[nm$Current.names %in% names(idxProf)], 'LNR0') # ## swap names
read.table("./_mod/atl_tuna_max/Profile.csv", skip = 1, sep = ",", header =TRUE)
read.table("./_mod/atl_tuna_max/Profile.csv",  sep = ",", header =TRUE)
